.TH "Sound Card Filter API" 3 "Tue May 13 2014" "Version 2.10.0" "mediastreamer2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Sound Card Filter API \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "struct _MSFilter * \fBms_snd_card_create_reader\fP (\fBMSSndCard\fP *obj)"
.br
.ti -1c
.RI "struct _MSFilter * \fBms_snd_card_create_writer\fP (\fBMSSndCard\fP *obj)"
.br
.ti -1c
.RI "\fBMSSndCard\fP * \fBms_snd_card_new\fP (\fBMSSndCardDesc\fP *desc)"
.br
.ti -1c
.RI "\fBMSSndCard\fP * \fBms_snd_card_new_with_name\fP (\fBMSSndCardDesc\fP *desc, const char *name)"
.br
.ti -1c
.RI "void \fBms_snd_card_destroy\fP (\fBMSSndCard\fP *obj)"
.br
.ti -1c
.RI "\fBMSSndCard\fP * \fBms_snd_card_dup\fP (\fBMSSndCard\fP *card)"
.br
.ti -1c
.RI "const char * \fBms_snd_card_get_driver_type\fP (const \fBMSSndCard\fP *obj)"
.br
.ti -1c
.RI "const char * \fBms_snd_card_get_name\fP (const \fBMSSndCard\fP *obj)"
.br
.ti -1c
.RI "const char * \fBms_snd_card_get_string_id\fP (\fBMSSndCard\fP *obj)"
.br
.ti -1c
.RI "unsigned int \fBms_snd_card_get_capabilities\fP (const \fBMSSndCard\fP *obj)"
.br
.ti -1c
.RI "int \fBms_snd_card_get_minimal_latency\fP (\fBMSSndCard\fP *obj)"
.br
.ti -1c
.RI "void \fBms_snd_card_set_level\fP (\fBMSSndCard\fP *obj, \fBMSSndCardMixerElem\fP e, int percent)"
.br
.ti -1c
.RI "int \fBms_snd_card_get_level\fP (\fBMSSndCard\fP *obj, \fBMSSndCardMixerElem\fP e)"
.br
.ti -1c
.RI "void \fBms_snd_card_set_capture\fP (\fBMSSndCard\fP *obj, \fBMSSndCardCapture\fP c)"
.br
.ti -1c
.RI "int \fBms_snd_card_set_control\fP (\fBMSSndCard\fP *obj, \fBMSSndCardControlElem\fP e, int val)"
.br
.ti -1c
.RI "int \fBms_snd_card_get_control\fP (\fBMSSndCard\fP *obj, \fBMSSndCardControlElem\fP e)"
.br
.ti -1c
.RI "int \fBms_snd_card_get_preferred_sample_rate\fP (const \fBMSSndCard\fP *obj)"
.br
.ti -1c
.RI "int \fBms_snd_card_set_preferred_sample_rate\fP (\fBMSSndCard\fP *obj, int rate)"
.br
.ti -1c
.RI "\fBMSSndCard\fP * \fBms_alsa_card_new_custom\fP (const char *pcmdev, const char *mixdev)"
.br
.ti -1c
.RI "void \fBms_alsa_card_set_forced_sample_rate\fP (int samplerate)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Function Documentation"
.PP 
.SS "struct _MSFilter* ms_snd_card_create_reader (\fBMSSndCard\fP *obj)\fC [read]\fP"
Create an INPUT filter based on the selected sound card\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A sound card object\&.
.RE
.PP
Returns: A MSFilter if successfull, NULL otherwise\&. 
.SS "struct _MSFilter* ms_snd_card_create_writer (\fBMSSndCard\fP *obj)\fC [read]\fP"
Create an OUPUT filter based on the selected sound card\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A sound card object\&.
.RE
.PP
Returns: A MSFilter if successfull, NULL otherwise\&. 
.SS "\fBMSSndCard\fP* ms_snd_card_new (\fBMSSndCardDesc\fP *desc)"
Create a new sound card object\&.
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP A sound card description object\&.
.RE
.PP
Returns: MSSndCard if successfull, NULL otherwise\&. 
.SS "\fBMSSndCard\fP* ms_snd_card_new_with_name (\fBMSSndCardDesc\fP *desc, const char *name)"
Create a new sound card object\&.
.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP A sound card description object\&. 
.br
\fIcard\fP mame
.RE
.PP
Returns: MSSndCard if successfull, NULL otherwise\&. <This sound card can capture sound
.PP
<This sound card can playback sound 
.SS "void ms_snd_card_destroy (\fBMSSndCard\fP *obj)"
Destroy sound card object\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A MSSndCard object\&. 
.RE
.PP

.SS "\fBMSSndCard\fP* ms_snd_card_dup (\fBMSSndCard\fP *card)"
Duplicate a sound card object\&.
.PP
This helps to open several time a sound card\&.
.PP
\fBParameters:\fP
.RS 4
\fIcard\fP A sound card object\&.
.RE
.PP
Returns: MSSndCard if successfull, NULL otherwise\&. 
.SS "const char* ms_snd_card_get_driver_type (const \fBMSSndCard\fP *obj)"
Retreive a sound card's driver type string\&.
.PP
Internal driver types are either: 'OSS, ALSA, WINSND, PASND, CA'
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A sound card object\&.
.RE
.PP
Returns: a string if successfull, NULL otherwise\&. 
.SS "const char* ms_snd_card_get_name (const \fBMSSndCard\fP *obj)"
Retreive a sound card's name\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A sound card object\&.
.RE
.PP
Returns: a string if successfull, NULL otherwise\&. 
.SS "const char* ms_snd_card_get_string_id (\fBMSSndCard\fP *obj)"
Retreive sound card's name (
.PP
\fBdriver_type:\fP
.RS 4

.RE
.PP
name)\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A sound card object\&.
.RE
.PP
Returns: A string if successfull, NULL otherwise\&. 
.SS "unsigned int ms_snd_card_get_capabilities (const \fBMSSndCard\fP *obj)"
Retreive sound card's capabilities\&.
.PP
.PP
.nf

  MS_SND_CARD_CAP_CAPTURE
  MS_SND_CARD_CAP_PLAYBACK
  MS_SND_CARD_CAP_CAPTURE|MS_SND_CARD_CAP_PLAYBACK
  MS_SND_CARD_CAP_BUILTIN_ECHO_CANCELLER
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A sound card object\&.
.RE
.PP
Returns: A unsigned int if successfull, 0 otherwise\&. 
.SS "int ms_snd_card_get_minimal_latency (\fBMSSndCard\fP *obj)"
Returns the sound card minimal latency (playback+record), in milliseconds\&. This value is to be used by the software echo cancellers to know where to search for the echo (optimization)\&. Typically, an echo shall not be found before the value returned by this function\&. If this value is not known, then it should return 0\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A sound card object\&. 
.RE
.PP

.SS "void ms_snd_card_set_level (\fBMSSndCard\fP *obj, \fBMSSndCardMixerElem\fPe, intpercent)"
Set some mixer level value\&.
.PP
.PP
.nf

  MS_SND_CARD_MASTER,
  MS_SND_CARD_PLAYBACK,
  MS_SND_CARD_CAPTURE
.fi
.PP
 Note: not implemented on all sound card filters\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A sound card object\&. 
.br
\fIe\fP A sound card mixer object\&. 
.br
\fIpercent\fP A volume level\&. 
.RE
.PP

.SS "int ms_snd_card_get_level (\fBMSSndCard\fP *obj, \fBMSSndCardMixerElem\fPe)"
Get some mixer level value\&.
.PP
.PP
.nf

  MS_SND_CARD_MASTER,
  MS_SND_CARD_PLAYBACK,
  MS_SND_CARD_CAPTURE
.fi
.PP
 Note: not implemented on all sound card filters\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A sound card object\&. 
.br
\fIe\fP A sound card mixer object\&.
.RE
.PP
Returns: A int if successfull, <0 otherwise\&. 
.SS "void ms_snd_card_set_capture (\fBMSSndCard\fP *obj, \fBMSSndCardCapture\fPc)"
Set some source for capture\&.
.PP
.PP
.nf

  MS_SND_CARD_MIC,
  MS_SND_CARD_LINE
.fi
.PP
 Note: not implemented on all sound card filters\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A sound card object\&. 
.br
\fIc\fP A sound card capture value\&.
.RE
.PP
Returns: A int if successfull, 0 otherwise\&. 
.SS "int ms_snd_card_set_control (\fBMSSndCard\fP *obj, \fBMSSndCardControlElem\fPe, intval)"
Set some mixer control\&.
.PP
.PP
.nf

  MS_SND_CARD_MASTER_MUTE, -> 0: unmute, 1: mute
  MS_SND_CARD_PLAYBACK_MUTE, -> 0: unmute, 1: mute
  MS_SND_CARD_CAPTURE_MUTE -> 0: unmute, 1: mute
.fi
.PP
 Note: not implemented on all sound card filters\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A sound card object\&. 
.br
\fIe\fP A sound card control object\&. 
.br
\fIpercent\fP A value for control\&.
.RE
.PP
Returns: 0 if successfull, <0 otherwise\&. 
.SS "int ms_snd_card_get_control (\fBMSSndCard\fP *obj, \fBMSSndCardControlElem\fPe)"
Get some mixer control\&.
.PP
.PP
.nf

  MS_SND_CARD_MASTER_MUTE, -> return 0: unmute, 1: mute
  MS_SND_CARD_PLAYBACK_MUTE, -> return 0: unmute, 1: mute
  MS_SND_CARD_CAPTURE_MUTE -> return 0: unmute, 1: mute
.fi
.PP
 Note: not implemented on all sound card filters\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A sound card object\&. 
.br
\fIe\fP A sound card mixer object\&.
.RE
.PP
Returns: A int if successfull, <0 otherwise\&. 
.SS "int ms_snd_card_get_preferred_sample_rate (const \fBMSSndCard\fP *obj)"
Get preferred sample rate
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A sound card object\&.
.RE
.PP
Returns: return sample rate in khz 
.SS "int ms_snd_card_set_preferred_sample_rate (\fBMSSndCard\fP *obj, intrate)"
set preferred sample rate\&. The underlying card will try to avoid any resampling for this samplerate\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP A sound card object\&. 
.br
\fIrate\fP sampling rate\&.
.RE
.PP
Returns: 0 if successfull, <0 otherwise\&. 
.SS "\fBMSSndCard\fP* ms_alsa_card_new_custom (const char *pcmdev, const char *mixdev)"
Create a alsa card with user supplied pcm name and mixer name\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpcmdev\fP The pcm device name following alsa conventions (ex: plughw:0) 
.br
\fImixdev\fP The mixer device name following alsa conventions\&.
.RE
.PP
Returns: a MSSndCard object, NULL if alsa support is not available\&. 
.SS "void ms_alsa_card_set_forced_sample_rate (intsamplerate)"
Use supplied sample rate to open alsa devices (forced rate)\&. Has no interest except workarouding driver bugs\&. Use -1 to revert to normal behavior\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for mediastreamer2 from the source code\&.
