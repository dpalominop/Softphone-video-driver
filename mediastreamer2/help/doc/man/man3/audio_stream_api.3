.TH "Audio streaming API - Create and run VoIP audio streams." 3 "Tue May 13 2014" "Version 2.10.0" "mediastreamer2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Audio streaming API - Create and run VoIP audio streams. \- 
.PP
Audio streaming API - Easily run audio streams from soundcard or wav files to RTP\&.  

.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct _AudioStream \fBAudioStream\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmedia_stream_set_target_network_bitrate\fP (MediaStream *stream, int target_bitrate)"
.br
.ti -1c
.RI "int \fBmedia_stream_get_target_network_bitrate\fP (const MediaStream *stream)"
.br
.ti -1c
.RI "float \fBmedia_stream_get_up_bw\fP (const MediaStream *stream)"
.br
.ti -1c
.RI "float \fBmedia_stream_get_down_bw\fP (const MediaStream *stream)"
.br
.ti -1c
.RI "int \fBaudio_stream_start_full\fP (\fBAudioStream\fP *stream, RtpProfile *profile, const char *rem_rtp_ip, int rem_rtp_port, const char *rem_rtcp_ip, int rem_rtcp_port, int payload, int jitt_comp, const char *infile, const char *outfile, \fBMSSndCard\fP *playcard, \fBMSSndCard\fP *captcard, bool_t use_ec)"
.br
.ti -1c
.RI "\fBAudioStream\fP * \fBaudio_stream_new\fP (int loc_rtp_port, int loc_rtcp_port, bool_t ipv6)"
.br
.ti -1c
.RI "int \fBaudio_stream_start_now\fP (\fBAudioStream\fP *stream, RtpProfile *prof, const char *remip, int remport, int rem_rtcp_port, int payload_type, int jitt_comp, \fBMSSndCard\fP *playcard, \fBMSSndCard\fP *captcard, bool_t echo_cancel)"
.br
.ti -1c
.RI "void \fBaudio_stream_iterate\fP (\fBAudioStream\fP *stream)"
.br
.ti -1c
.RI "void \fBaudio_stream_enable_echo_limiter\fP (\fBAudioStream\fP *stream, EchoLimiterType type)"
.br
.ti -1c
.RI "void \fBaudio_stream_enable_gain_control\fP (\fBAudioStream\fP *stream, bool_t val)"
.br
.ti -1c
.RI "void \fBaudio_stream_enable_automatic_gain_control\fP (\fBAudioStream\fP *stream, bool_t val)"
.br
.ti -1c
.RI "void \fBaudio_stream_set_echo_canceller_params\fP (\fBAudioStream\fP *st, int tail_len_ms, int delay_ms, int framesize)"
.br
.ti -1c
.RI "void \fBaudio_stream_mute_rtp\fP (\fBAudioStream\fP *stream, bool_t val)"
.br
.ti -1c
.RI "void \fBaudio_stream_enable_noise_gate\fP (\fBAudioStream\fP *stream, bool_t val)"
.br
.ti -1c
.RI "void \fBaudio_stream_enable_equalizer\fP (\fBAudioStream\fP *stream, bool_t enabled)"
.br
.ti -1c
.RI "void \fBaudio_stream_stop\fP (\fBAudioStream\fP *stream)"
.br
.ti -1c
.RI "int \fBaudio_stream_send_dtmf\fP (\fBAudioStream\fP *stream, char dtmf)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Audio streaming API - Easily run audio streams from soundcard or wav files to RTP\&. 


.SH "Typedef Documentation"
.PP 
.SS "typedef struct _AudioStream \fBAudioStream\fP"
The AudioStream holds all resources to create and run typical VoIP audiostream\&. 
.SH "Function Documentation"
.PP 
.SS "int media_stream_set_target_network_bitrate (MediaStream *stream, inttarget_bitrate)"

.br
For multirate codecs like OPUS, encoder output target bitrate must be set\&. 
.br
Encoder will compute output codec bitrate from this value\&. 
.br
 default value is the value corresponding the rtp PayloadType 
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP stream to apply parameter on 
.br
\fItarget_bitrate\fP in bit per seconds 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if succeed 
.RE
.PP

.SS "int media_stream_get_target_network_bitrate (const MediaStream *stream)"
get the stream target bitrate\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP stream to apply parameter on 
.br
\fItarget_bitrate\fP in bit per seconds 
.RE
.PP

.SS "float media_stream_get_up_bw (const MediaStream *stream)"
get current stream upload bitrate\&. Value is updated every seconds 
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
bitrate in bit per seconds 
.RE
.PP

.SS "float media_stream_get_down_bw (const MediaStream *stream)"
get current stream download bitrate\&. Value is updated every seconds 
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
bitrate in bit per seconds 
.RE
.PP

.SS "int audio_stream_start_full (\fBAudioStream\fP *stream, RtpProfile *profile, const char *rem_rtp_ip, intrem_rtp_port, const char *rem_rtcp_ip, intrem_rtcp_port, intpayload, intjitt_comp, const char *infile, const char *outfile, \fBMSSndCard\fP *playcard, \fBMSSndCard\fP *captcard, bool_tuse_ec)"
Starts an audio stream from/to local wav files or soundcards\&.
.PP
This method starts the processing of the audio stream, that is playing from wav file or soundcard, voice processing, encoding, sending through RTP, receiving from RTP, decoding, voice processing and wav file recording or soundcard playback\&.
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP an AudioStream previously created with \fBaudio_stream_new()\fP\&. 
.br
\fIprof\fP a RtpProfile containing all PayloadType possible during the audio session\&. 
.br
\fIrem_rtp_ip\fP remote IP address where to send the encoded audio\&. 
.br
\fIrem_rtp_port\fP remote IP port where to send the encoded audio\&. 
.br
\fIrem_rtcp_ip\fP remote IP address for RTCP\&. 
.br
\fIrem_rtcp_port\fP remote port for RTCP\&. 
.br
\fIpayload_type\fP payload type index to use for the sending stream\&. This index must point to a valid PayloadType in the RtpProfile\&. 
.br
\fIjitt_comp\fP Nominal jitter buffer size in milliseconds\&. 
.br
\fIinfile\fP path to wav file to play out (can be NULL) 
.br
\fIoutfile\fP path to wav file to record into (can be NULL) 
.br
\fIplaycard\fP The soundcard to be used for playback (can be NULL) 
.br
\fIcaptcard\fP The soundcard to be used for catpure\&. (can be NULL) 
.br
\fIecho_cancel\fP whether echo cancellation is to be performed\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if sucessful, -1 otherwise\&. 
.RE
.PP
<This sound card has built-in echo cancellation 
.SS "\fBAudioStream\fP* audio_stream_new (intloc_rtp_port, intloc_rtcp_port, bool_tipv6)"
Creates an AudioStream object listening on a RTP port\&. 
.PP
\fBParameters:\fP
.RS 4
\fIloc_rtp_port\fP the local UDP port to listen for RTP packets\&. 
.br
\fIloc_rtcp_port\fP the local UDP port to listen for RTCP packets 
.br
\fIipv6\fP TRUE if ipv6 must be used\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
a new AudioStream\&. 
.RE
.PP

.SS "int audio_stream_start_now (\fBAudioStream\fP *stream, RtpProfile *prof, const char *remip, intremport, intrem_rtcp_port, intpayload_type, intjitt_comp, \fBMSSndCard\fP *playcard, \fBMSSndCard\fP *captcard, bool_techo_cancel)"
Starts an audio stream from local soundcards\&.
.PP
This method starts the processing of the audio stream, that is capture from soundcard, voice processing, encoding, sending through RTP, receiving from RTP, decoding, voice processing and soundcard playback\&.
.PP
\fBParameters:\fP
.RS 4
\fIstream\fP an AudioStream previously created with \fBaudio_stream_new()\fP\&. 
.br
\fIprof\fP a RtpProfile containing all PayloadType possible during the audio session\&. 
.br
\fIremip\fP remote IP address where to send the encoded audio\&. 
.br
\fIremport\fP remote IP port where to send the encoded audio 
.br
\fIrem_rtcp_port\fP remote port for RTCP\&. 
.br
\fIpayload_type\fP payload type index to use for the sending stream\&. This index must point to a valid PayloadType in the RtpProfile\&. 
.br
\fIjitt_comp\fP Nominal jitter buffer size in milliseconds\&. 
.br
\fIplaycard\fP The soundcard to be used for playback 
.br
\fIcaptcard\fP The soundcard to be used for catpure\&. 
.br
\fIecho_cancel\fP whether echo cancellation is to be performed\&. 
.RE
.PP

.SS "void audio_stream_iterate (\fBAudioStream\fP *stream)"
Executes background low priority tasks related to audio processing (RTP statistics analysis)\&. It should be called periodically, for example with an interval of 100 ms or so\&. 
.SS "void audio_stream_enable_echo_limiter (\fBAudioStream\fP *stream, EchoLimiterTypetype)"
enable echo-limiter dispositve: one MSVolume in input branch controls a MSVolume in the output branch 
.SS "void audio_stream_enable_gain_control (\fBAudioStream\fP *stream, bool_tval)"
enable gain control, to be done before start() 
.SS "void audio_stream_enable_automatic_gain_control (\fBAudioStream\fP *stream, bool_tval)"
enable automatic gain control, to be done before start() 
.SS "void audio_stream_set_echo_canceller_params (\fBAudioStream\fP *st, inttail_len_ms, intdelay_ms, intframesize)"
to be done before start 
.SS "void audio_stream_mute_rtp (\fBAudioStream\fP *stream, bool_tval)"
enable/disable rtp stream 
.SS "void audio_stream_enable_noise_gate (\fBAudioStream\fP *stream, bool_tval)"
enable noise gate, must be done before start() 
.SS "void audio_stream_enable_equalizer (\fBAudioStream\fP *stream, bool_tenabled)"
enable parametric equalizer in the stream that goes to the speaker 
.SS "void audio_stream_stop (\fBAudioStream\fP *stream)"
stop the audio streaming thread and free everything 
.SS "int audio_stream_send_dtmf (\fBAudioStream\fP *stream, chardtmf)"
send a dtmf 
.SH "Author"
.PP 
Generated automatically by Doxygen for mediastreamer2 from the source code\&.
