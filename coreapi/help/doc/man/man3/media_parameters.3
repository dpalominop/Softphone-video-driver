.TH "Controlling media parameters" 3 "Fri May 2 2014" "Version 3.7.0" "liblinphone" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Controlling media parameters \- 
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fB_LinphoneVideoPolicy\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBLINPHONE_FIND_PAYLOAD_IGNORE_RATE\fP   -1"
.br
.ti -1c
.RI "#define \fBLINPHONE_FIND_PAYLOAD_IGNORE_CHANNELS\fP   -1"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum 
.br
\fB_LinphoneMediaEncryption\fP \fBLinphoneMediaEncryption\fP"
.br
.ti -1c
.RI "typedef struct \fB_LinphoneVideoPolicy\fP \fBLinphoneVideoPolicy\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_LinphoneMediaEncryption\fP { \fBLinphoneMediaEncryptionNone\fP, \fBLinphoneMediaEncryptionSRTP\fP, \fBLinphoneMediaEncryptionZRTP\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBlinphone_core_enable_adaptive_rate_control\fP (\fBLinphoneCore\fP *lc, bool_t enabled)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_adaptive_rate_control_enabled\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_download_bandwidth\fP (\fBLinphoneCore\fP *lc, int bw)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_upload_bandwidth\fP (\fBLinphoneCore\fP *lc, int bw)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_download_bandwidth\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_upload_bandwidth\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_download_ptime\fP (\fBLinphoneCore\fP *lc, int ptime)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_download_ptime\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_upload_ptime\fP (\fBLinphoneCore\fP *lc, int ptime)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_upload_ptime\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "const MSList * \fBlinphone_core_get_audio_codecs\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "const MSList * \fBlinphone_core_get_video_codecs\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_set_audio_codecs\fP (\fBLinphoneCore\fP *lc, MSList *codecs)"
.br
.ti -1c
.RI "int \fBlinphone_core_set_video_codecs\fP (\fBLinphoneCore\fP *lc, MSList *codecs)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_audio_jittcomp\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_video_jittcomp\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_nortp_timeout\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_audio_jittcomp\fP (\fBLinphoneCore\fP *lc, int value)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_video_jittcomp\fP (\fBLinphoneCore\fP *lc, int value)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_audio_port_range\fP (\fBLinphoneCore\fP *lc, int min_port, int max_port)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_video_port_range\fP (\fBLinphoneCore\fP *lc, int min_port, int max_port)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_nortp_timeout\fP (\fBLinphoneCore\fP *lc, int nortp_timeout)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_get_use_info_for_dtmf\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_use_info_for_dtmf\fP (\fBLinphoneCore\fP *lc, bool_t use_info)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_get_use_rfc2833_for_dtmf\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_use_rfc2833_for_dtmf\fP (\fBLinphoneCore\fP *lc, bool_t use_rfc2833)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_play_level\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_ring_level\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_rec_level\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_ring_level\fP (\fBLinphoneCore\fP *lc, int level)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_mic_gain_db\fP (\fBLinphoneCore\fP *lc, float gaindb)"
.br
.ti -1c
.RI "float \fBlinphone_core_get_mic_gain_db\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_playback_gain_db\fP (\fBLinphoneCore\fP *lc, float gaindb)"
.br
.ti -1c
.RI "float \fBlinphone_core_get_playback_gain_db\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_play_level\fP (\fBLinphoneCore\fP *lc, int level)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_rec_level\fP (\fBLinphoneCore\fP *lc, int level)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_sound_device_can_capture\fP (\fBLinphoneCore\fP *lc, const char *devid)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_sound_device_can_playback\fP (\fBLinphoneCore\fP *lc, const char *devid)"
.br
.ti -1c
.RI "int \fBlinphone_core_set_ringer_device\fP (\fBLinphoneCore\fP *lc, const char *devid)"
.br
.ti -1c
.RI "int \fBlinphone_core_set_playback_device\fP (\fBLinphoneCore\fP *lc, const char *devid)"
.br
.ti -1c
.RI "int \fBlinphone_core_set_capture_device\fP (\fBLinphoneCore\fP *lc, const char *devid)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_ringer_device\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_playback_device\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_capture_device\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "const char ** \fBlinphone_core_get_sound_devices\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "const char ** \fBlinphone_core_get_video_devices\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_ring\fP (\fBLinphoneCore\fP *lc, const char *path)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_ring\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_ringback\fP (\fBLinphoneCore\fP *lc, const char *path)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_ringback\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_echo_cancellation\fP (\fBLinphoneCore\fP *lc, bool_t val)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_echo_cancellation_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_send_dtmf\fP (\fBLinphoneCore\fP *lc, char dtmf)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_video_policy\fP (\fBLinphoneCore\fP *lc, const \fBLinphoneVideoPolicy\fP *policy)"
.br
.ti -1c
.RI "const \fBLinphoneVideoPolicy\fP * \fBlinphone_core_get_video_policy\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_video_preview\fP (\fBLinphoneCore\fP *lc, bool_t val)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_video_preview_enabled\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_self_view\fP (\fBLinphoneCore\fP *lc, bool_t val)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_self_view_enabled\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_set_video_device\fP (\fBLinphoneCore\fP *lc, const char *id)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_video_device\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "unsigned long \fBlinphone_core_get_native_video_window_id\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_native_video_window_id\fP (\fBLinphoneCore\fP *lc, unsigned long id)"
.br
.ti -1c
.RI "unsigned long \fBlinphone_core_get_native_preview_window_id\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_native_preview_window_id\fP (\fBLinphoneCore\fP *lc, unsigned long id)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_device_rotation\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_device_rotation\fP (\fBLinphoneCore\fP *lc, int rotation)"
.br
.ti -1c
.RI "const MSVideoSizeDef * \fBlinphone_core_get_supported_video_sizes\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_preferred_video_size\fP (\fBLinphoneCore\fP *lc, MSVideoSize vsize)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_preferred_video_size_by_name\fP (\fBLinphoneCore\fP *lc, const char *name)"
.br
.ti -1c
.RI "MSVideoSize \fBlinphone_core_get_preferred_video_size\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_play_dtmf\fP (\fBLinphoneCore\fP *lc, char dtmf, int duration_ms)"
.br
.ti -1c
.RI "void \fBlinphone_core_stop_dtmf\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_mtu\fP (\fBLinphoneCore\fP *lc, int mtu)"
.br
.ti -1c
.RI "void \fBlinphone_core_stop_ringing\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "const char * \fBlinphone_media_encryption_to_string\fP (\fBLinphoneMediaEncryption\fP menc)"
.br
.ti -1c
.RI "void \fBlinphone_call_enable_echo_cancellation\fP (\fBLinphoneCall\fP *call, bool_t val)"
.br
.ti -1c
.RI "bool_t \fBlinphone_call_echo_cancellation_enabled\fP (\fBLinphoneCall\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_call_enable_echo_limiter\fP (\fBLinphoneCall\fP *call, bool_t val)"
.br
.ti -1c
.RI "bool_t \fBlinphone_call_echo_limiter_enabled\fP (const \fBLinphoneCall\fP *call)"
.br
.ti -1c
.RI "\fBLinphoneCallParams\fP * \fBlinphone_core_create_default_call_parameters\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_dns_srv\fP (\fBLinphoneCore\fP *lc, bool_t enable)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_dns_srv_enabled\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_payload_type_enabled\fP (\fBLinphoneCore\fP *lc, const PayloadType *pt)"
.br
.ti -1c
.RI "int \fBlinphone_core_enable_payload_type\fP (\fBLinphoneCore\fP *lc, PayloadType *pt, bool_t enable)"
.br
.ti -1c
.RI "PayloadType * \fBlinphone_core_find_payload_type\fP (\fBLinphoneCore\fP *lc, const char *type, int rate, int channels)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_audio_adaptive_jittcomp\fP (\fBLinphoneCore\fP *lc, bool_t enable)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_audio_adaptive_jittcomp_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_video_adaptive_jittcomp\fP (\fBLinphoneCore\fP *lc, bool_t enable)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_video_adaptive_jittcomp_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_reload_sound_devices\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_echo_limiter\fP (\fBLinphoneCore\fP *lc, bool_t val)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_echo_limiter_enabled\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_mic\fP (\fBLinphoneCore\fP *lc, bool_t enable)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_mic_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_video\fP (\fBLinphoneCore\fP *lc, bool_t vcap_enabled, bool_t display_enabled)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_video_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_video_capture\fP (\fBLinphoneCore\fP *lc, bool_t enable)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_video_display\fP (\fBLinphoneCore\fP *lc, bool_t enable)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_video_capture_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_video_display_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_reload_video_devices\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_set_static_picture\fP (\fBLinphoneCore\fP *lc, const char *path)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_static_picture\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_set_static_picture_fps\fP (\fBLinphoneCore\fP *lc, float fps)"
.br
.ti -1c
.RI "float \fBlinphone_core_get_static_picture_fps\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_use_preview_window\fP (\fBLinphoneCore\fP *lc, bool_t yesno)"
.br
.ti -1c
.RI "int \fBlinphone_core_set_media_encryption\fP (\fBLinphoneCore\fP *lc, \fBLinphoneMediaEncryption\fP menc)"
.br
.ti -1c
.RI "\fBLinphoneMediaEncryption\fP \fBlinphone_core_get_media_encryption\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_is_media_encryption_mandatory\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_media_encryption_mandatory\fP (\fBLinphoneCore\fP *lc, bool_t m)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_video_display_filter\fP (\fBLinphoneCore\fP *lc, const char *filter_name)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_video_display_filter\fP (\fBLinphoneCore\fP *lc)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define LINPHONE_FIND_PAYLOAD_IGNORE_RATE   -1"
Wildcard value used by \fBlinphone_core_find_payload_type\fP to ignore rate in search algorithm 
.SS "#define LINPHONE_FIND_PAYLOAD_IGNORE_CHANNELS   -1"
Wildcard value used by \fBlinphone_core_find_payload_type\fP to ignore channel in search algorithm 
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fB_LinphoneMediaEncryption\fP \fBLinphoneMediaEncryption\fP"
Enum describing type of media encryption types\&. 
.SS "typedef struct \fB_LinphoneVideoPolicy\fP \fBLinphoneVideoPolicy\fP"
Structure describing policy regarding video streams establishments\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fB_LinphoneMediaEncryption\fP"
Enum describing type of media encryption types\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphoneMediaEncryptionNone \fP\fP
No media encryption is used 
.TP
\fB\fILinphoneMediaEncryptionSRTP \fP\fP
Use SRTP media encryption 
.TP
\fB\fILinphoneMediaEncryptionZRTP \fP\fP
Use ZRTP media encryption 
.SH "Function Documentation"
.PP 
.SS "void linphone_core_enable_adaptive_rate_control (\fBLinphoneCore\fP *lc, bool_tenabled)"
Enable adaptive rate control\&.
.PP
Adaptive rate control consists in using RTCP feedback provided information to dynamically control the output bitrate of the audio and video encoders, so that we can adapt to the network conditions and available bandwidth\&. Control of the audio encoder is done in case of audio-only call, and control of the video encoder is done for audio & video calls\&. Adaptive rate control feature is enabled by default\&. 
.SS "bool_t linphone_core_adaptive_rate_control_enabled (const \fBLinphoneCore\fP *lc)"
Returns whether adaptive rate control is enabled\&.
.PP
See \fBlinphone_core_enable_adaptive_rate_control()\fP\&. 
.SS "void linphone_core_set_download_bandwidth (\fBLinphoneCore\fP *lc, intbw)"
Sets maximum available download bandwidth This is IP bandwidth, in kbit/s\&. This information is used signaled to other parties during calls (within SDP messages) so that the remote end can have sufficient knowledge to properly configure its audio & video codec output bitrate to not overflow available bandwidth\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore object 
.br
\fIbw\fP the bandwidth in kbits/s, 0 for infinite 
.RE
.PP

.SS "void linphone_core_set_upload_bandwidth (\fBLinphoneCore\fP *lc, intbw)"
Sets maximum available upload bandwidth This is IP bandwidth, in kbit/s\&. This information is used by liblinphone together with remote side available bandwidth signaled in SDP messages to properly configure audio & video codec's output bitrate\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore object 
.br
\fIbw\fP the bandwidth in kbits/s, 0 for infinite 
.RE
.PP

.SS "int linphone_core_get_download_bandwidth (const \fBLinphoneCore\fP *lc)"
Retrieve the maximum available download bandwidth\&. This value was set by \fBlinphone_core_set_download_bandwidth()\fP\&. 
.SS "int linphone_core_get_upload_bandwidth (const \fBLinphoneCore\fP *lc)"
Retrieve the maximum available upload bandwidth\&. This value was set by \fBlinphone_core_set_upload_bandwidth()\fP\&. 
.SS "void linphone_core_set_download_ptime (\fBLinphoneCore\fP *lc, intptime)"
Set audio packetization time linphone expects to receive from peer\&. A value of zero means that ptime is not specified\&. 
.SS "int linphone_core_get_download_ptime (\fBLinphoneCore\fP *lc)"
Get audio packetization time linphone expects to receive from peer\&. A value of zero means that ptime is not specified\&. 
.SS "void linphone_core_set_upload_ptime (\fBLinphoneCore\fP *lc, intptime)"
Set audio packetization time linphone will send (in absence of requirement from peer) A value of 0 stands for the current codec default packetization time\&. 
.SS "int linphone_core_get_upload_ptime (\fBLinphoneCore\fP *lc)"
Set audio packetization time linphone will send (in absence of requirement from peer) A value of 0 stands for the current codec default packetization time\&. 
.SS "const MSList* linphone_core_get_audio_codecs (const \fBLinphoneCore\fP *lc)"
Returns the list of available audio codecs\&.
.PP
This list is unmodifiable\&. The ->data field of the MSList points a PayloadType structure holding the codec information\&. It is possible to make copy of the list with ms_list_copy() in order to modify it (such as the order of codecs)\&. 
.SS "const MSList* linphone_core_get_video_codecs (const \fBLinphoneCore\fP *lc)"
Returns the list of available video codecs\&.
.PP
This list is unmodifiable\&. The ->data field of the MSList points a PayloadType structure holding the codec information\&. It is possible to make copy of the list with ms_list_copy() in order to modify it (such as the order of codecs)\&. 
.SS "int linphone_core_set_audio_codecs (\fBLinphoneCore\fP *lc, MSList *codecs)"
Sets the list of audio codecs\&.
.PP
The list is taken by the LinphoneCore thus the application should not free it\&. This list is made of struct PayloadType describing the codec parameters\&. 
.SS "int linphone_core_set_video_codecs (\fBLinphoneCore\fP *lc, MSList *codecs)"
Sets the list of video codecs\&.
.PP
The list is taken by the LinphoneCore thus the application should not free it\&. This list is made of struct PayloadType describing the codec parameters\&. 
.SS "int linphone_core_get_audio_jittcomp (\fBLinphoneCore\fP *lc)"
Returns the nominal audio jitter buffer size in milliseconds\&. 
.SS "int linphone_core_get_video_jittcomp (\fBLinphoneCore\fP *lc)"
Returns the nominal video jitter buffer size in milliseconds\&. 
.SS "int linphone_core_get_nortp_timeout (const \fBLinphoneCore\fP *lc)"
Returns the value in seconds of the no-rtp timeout\&.
.PP
When no RTP or RTCP packets have been received for a while LinphoneCore will consider the call is broken (remote end crashed or disconnected from the network), and thus will terminate the call\&. The no-rtp timeout is the duration above which the call is considered broken\&. 
.SS "void linphone_core_set_audio_jittcomp (\fBLinphoneCore\fP *lc, intvalue)"
Sets the nominal audio jitter buffer size in milliseconds\&. 
.SS "void linphone_core_set_video_jittcomp (\fBLinphoneCore\fP *lc, intvalue)"
Sets the nominal video jitter buffer size in milliseconds\&. 
.SS "void linphone_core_set_audio_port_range (\fBLinphoneCore\fP *lc, intmin_port, intmax_port)"
Sets the UDP port range from which to randomly select the port used for audio streaming\&. 
.SS "void linphone_core_set_video_port_range (\fBLinphoneCore\fP *lc, intmin_port, intmax_port)"
Sets the UDP port range from which to randomly select the port used for video streaming\&. 
.SS "void linphone_core_set_nortp_timeout (\fBLinphoneCore\fP *lc, intnortp_timeout)"
Sets the no-rtp timeout value in seconds\&.
.PP
See \fBlinphone_core_get_nortp_timeout()\fP for details\&. 
.SS "bool_t linphone_core_get_use_info_for_dtmf (\fBLinphoneCore\fP *lc)"
Indicates whether SIP INFO is used for sending digits\&. 
.SS "void linphone_core_set_use_info_for_dtmf (\fBLinphoneCore\fP *lc, bool_tuse_info)"
Sets whether SIP INFO is to be used for sending digits\&. 
.SS "bool_t linphone_core_get_use_rfc2833_for_dtmf (\fBLinphoneCore\fP *lc)"
Indicates whether RFC2833 is used for sending digits\&. 
.SS "void linphone_core_set_use_rfc2833_for_dtmf (\fBLinphoneCore\fP *lc, bool_tuse_rfc2833)"
Sets whether RFC2833 is to be used for sending digits\&. 
.SS "int linphone_core_get_play_level (\fBLinphoneCore\fP *lc)"
Get playback sound level in 0-100 scale\&. 
.SS "int linphone_core_get_ring_level (\fBLinphoneCore\fP *lc)"
Get ring sound level in 0-100 scale 
.SS "int linphone_core_get_rec_level (\fBLinphoneCore\fP *lc)"
Get sound capture level in 0-100 scale 
.SS "void linphone_core_set_ring_level (\fBLinphoneCore\fP *lc, intlevel)"
Set sound ring level in 0-100 scale 
.SS "void linphone_core_set_mic_gain_db (\fBLinphoneCore\fP *lc, floatgaindb)"
Allow to control microphone level: gain in db 
.SS "float linphone_core_get_mic_gain_db (\fBLinphoneCore\fP *lc)"
Get microphone gain in db\&. 
.SS "void linphone_core_set_playback_gain_db (\fBLinphoneCore\fP *lc, floatgaindb)"
Allow to control play level before entering sound card: gain in db 
.SS "float linphone_core_get_playback_gain_db (\fBLinphoneCore\fP *lc)"
Get playback gain in db before entering sound card\&. 
.SS "void linphone_core_set_play_level (\fBLinphoneCore\fP *lc, intlevel)"
Set sound playback level in 0-100 scale 
.SS "void linphone_core_set_rec_level (\fBLinphoneCore\fP *lc, intlevel)"
Set sound capture level in 0-100 scale 
.SS "bool_t linphone_core_sound_device_can_capture (\fBLinphoneCore\fP *lc, const char *devid)"
Returns true if the specified sound device can capture sound\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIdevid\fP the device name as returned by \fBlinphone_core_get_sound_devices()\fP 
.RE
.PP

.SS "bool_t linphone_core_sound_device_can_playback (\fBLinphoneCore\fP *lc, const char *devid)"
Returns true if the specified sound device can play sound\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIdevid\fP the device name as returned by \fBlinphone_core_get_sound_devices()\fP 
.RE
.PP

.SS "int linphone_core_set_ringer_device (\fBLinphoneCore\fP *lc, const char *devid)"
Sets the sound device used for ringing\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIdevid\fP the device name as returned by \fBlinphone_core_get_sound_devices()\fP 
.RE
.PP

.SS "int linphone_core_set_playback_device (\fBLinphoneCore\fP *lc, const char *devid)"
Sets the sound device used for playback\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIdevid\fP the device name as returned by \fBlinphone_core_get_sound_devices()\fP 
.RE
.PP

.SS "int linphone_core_set_capture_device (\fBLinphoneCore\fP *lc, const char *devid)"
Sets the sound device used for capture\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIdevid\fP the device name as returned by \fBlinphone_core_get_sound_devices()\fP 
.RE
.PP

.SS "const char* linphone_core_get_ringer_device (\fBLinphoneCore\fP *lc)"
Returns the name of the currently assigned sound device for ringing\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP

.SS "const char* linphone_core_get_playback_device (\fBLinphoneCore\fP *lc)"
Returns the name of the currently assigned sound device for playback\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP

.SS "const char* linphone_core_get_capture_device (\fBLinphoneCore\fP *lc)"
Returns the name of the currently assigned sound device for capture\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP

.SS "const char** linphone_core_get_sound_devices (\fBLinphoneCore\fP *lc)"
Returns an unmodifiable array of available sound devices\&.
.PP
The array is NULL terminated\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP

.SS "const char** linphone_core_get_video_devices (const \fBLinphoneCore\fP *lc)"
Returns an unmodifiable array of available video capture devices\&.
.PP
The array is NULL terminated\&. 
.SS "void linphone_core_set_ring (\fBLinphoneCore\fP *lc, const char *path)"
Sets the path to a wav file used for ringing\&.
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP The file must be a wav 16bit linear\&. Local ring is disabled if null 
.br
\fIlc\fP The LinphoneCore object 
.RE
.PP

.SS "const char* linphone_core_get_ring (const \fBLinphoneCore\fP *lc)"
Returns the path to the wav file used for ringing\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP

.SS "void linphone_core_set_ringback (\fBLinphoneCore\fP *lc, const char *path)"
Sets the path to a wav file used for ringing back\&.
.PP
Ringback means the ring that is heard when it's ringing at the remote party\&. The file must be a wav 16bit linear\&. 
.SS "const char* linphone_core_get_ringback (const \fBLinphoneCore\fP *lc)"
Returns the path to the wav file used for ringing back\&. 
.SS "void linphone_core_enable_echo_cancellation (\fBLinphoneCore\fP *lc, bool_tval)"
Enables or disable echo cancellation\&. Value is saved an used for subsequent calls 
.SS "bool_t linphone_core_echo_cancellation_enabled (\fBLinphoneCore\fP *lc)"
Returns TRUE if echo cancellation is enabled\&. 
.SS "void linphone_core_send_dtmf (\fBLinphoneCore\fP *lc, chardtmf)"
Send the specified dtmf\&.
.PP
This function only works during calls\&. The dtmf is automatically played to the user\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIdtmf\fP The dtmf name specified as a char, such as '0', '#' etc\&.\&.\&. 
.RE
.PP

.SS "void linphone_core_set_video_policy (\fBLinphoneCore\fP *lc, const \fBLinphoneVideoPolicy\fP *policy)"
Sets the default policy for video\&. This policy defines whether:
.IP "\(bu" 2
video shall be initiated by default for outgoing calls
.IP "\(bu" 2
video shall be accepter by default for incoming calls 
.PP

.SS "const \fBLinphoneVideoPolicy\fP* linphone_core_get_video_policy (\fBLinphoneCore\fP *lc)"
Get the default policy for video\&. See \fBlinphone_core_set_video_policy()\fP for more details\&. 
.SS "void linphone_core_enable_video_preview (\fBLinphoneCore\fP *lc, bool_tval)"
Controls video preview enablement\&.
.PP
Video preview refers to the action of displaying the local webcam image to the user while not in call\&. 
.SS "bool_t linphone_core_video_preview_enabled (const \fBLinphoneCore\fP *lc)"
Returns TRUE if video previewing is enabled\&. 
.SS "void linphone_core_enable_self_view (\fBLinphoneCore\fP *lc, bool_tval)"
Enables or disable self view during calls\&.
.PP
Self-view refers to having local webcam image inserted in corner of the video window during calls\&. This function works at any time, including during calls\&. 
.SS "bool_t linphone_core_self_view_enabled (const \fBLinphoneCore\fP *lc)"
Returns TRUE if self-view is enabled, FALSE otherwise\&.
.PP
Refer to \fBlinphone_core_enable_self_view()\fP for details\&. 
.SS "int linphone_core_set_video_device (\fBLinphoneCore\fP *lc, const char *id)"
Sets the active video device\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIid\fP the name of the video device as returned by \fBlinphone_core_get_video_devices()\fP 
.RE
.PP

.SS "const char* linphone_core_get_video_device (const \fBLinphoneCore\fP *lc)"
Returns the name of the currently active video device\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP

.SS "unsigned long linphone_core_get_native_video_window_id (const \fBLinphoneCore\fP *lc)"
Returns the native window handle of the video window, casted as an unsigned long\&. 
.SS "void linphone_core_set_native_video_window_id (\fBLinphoneCore\fP *lc, unsigned longid)"
Set the native video window id where the video is to be displayed\&. For MacOS, Linux, Windows: if not set or zero the core will create its own window, unless the special id -1 is given\&. 
.SS "unsigned long linphone_core_get_native_preview_window_id (const \fBLinphoneCore\fP *lc)"
Returns the native window handle of the video preview window, casted as an unsigned long\&. 
.SS "void linphone_core_set_native_preview_window_id (\fBLinphoneCore\fP *lc, unsigned longid)"
Set the native window id where the preview video (local camera) is to be displayed\&. This has to be used in conjonction with \fBlinphone_core_use_preview_window()\fP\&. MacOS, Linux, Windows: if not set or zero the core will create its own window, unless the special id -1 is given\&. 
.SS "int linphone_core_get_device_rotation (\fBLinphoneCore\fP *lc)"
*returns current device orientation 
.SS "void linphone_core_set_device_rotation (\fBLinphoneCore\fP *lc, introtation)"
Tells the core the device current orientation\&. This can be used by capture filters on mobile devices to select between portrait/landscape mode and to produce properly oriented images\&. The exact meaning of the value in rotation if left to each device specific implementations\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP object\&. 
.br
\fIrotation\fP \&. IOS supported values are 0 for UIInterfaceOrientationPortrait and 270 for UIInterfaceOrientationLandscapeRight\&. 
.RE
.PP

.SS "const MSVideoSizeDef* linphone_core_get_supported_video_sizes (\fBLinphoneCore\fP *lc)"
Returns the zero terminated table of supported video resolutions\&. 
.SS "void linphone_core_set_preferred_video_size (\fBLinphoneCore\fP *lc, MSVideoSizevsize)"
Sets the preferred video size\&.
.PP
This applies only to the stream that is captured and sent to the remote party, since we accept all standard video size on the receive path\&. 
.SS "void linphone_core_set_preferred_video_size_by_name (\fBLinphoneCore\fP *lc, const char *name)"
Sets the preferred video size by its name\&.
.PP
This is identical to \fBlinphone_core_set_preferred_video_size()\fP except that it takes the name of the video resolution as input\&. Video resolution names are: qcif, svga, cif, vga, 4cif, svga \&.\&.\&. 
.SS "MSVideoSize linphone_core_get_preferred_video_size (\fBLinphoneCore\fP *lc)"
Returns the current preferred video size for sending\&. 
.SS "void linphone_core_play_dtmf (\fBLinphoneCore\fP *lc, chardtmf, intduration_ms)"
Plays a dtmf sound to the local user\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.br
\fIdtmf\fP DTMF to play ['0'\&.\&.'16'] | '#' | '#' 
.br
\fIduration_ms\fP duration in ms, -1 means play until next further call to \fBlinphone_core_stop_dtmf()\fP 
.RE
.PP

.SS "void linphone_core_stop_dtmf (\fBLinphoneCore\fP *lc)"
Stops playing a dtmf started by \fBlinphone_core_play_dtmf()\fP\&. 
.SS "void linphone_core_set_mtu (\fBLinphoneCore\fP *lc, intmtu)"
Sets the maximum transmission unit size in bytes\&. This information is useful for sending RTP packets\&. Default value is 1500\&. 
.SS "void linphone_core_stop_ringing (\fBLinphoneCore\fP *lc)"
Whenever the liblinphone is playing a ring to advertise an incoming call or ringback of an outgoing call, this function stops the ringing\&. Typical use is to stop ringing when the user requests to ignore the call\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.RE
.PP

.SS "const char* linphone_media_encryption_to_string (\fBLinphoneMediaEncryption\fPmenc)"
Convert enum member to string\&. 
.SS "void linphone_call_enable_echo_cancellation (\fBLinphoneCall\fP *call, bool_tval)"
Enables or disable echo cancellation for this call 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP 
.br
\fIval\fP 
.RE
.PP

.SS "bool_t linphone_call_echo_cancellation_enabled (\fBLinphoneCall\fP *lc)"
Returns TRUE if echo cancellation is enabled\&. 
.SS "void linphone_call_enable_echo_limiter (\fBLinphoneCall\fP *call, bool_tval)"
Enables or disable echo limiter for this call 
.PP
\fBParameters:\fP
.RS 4
\fIcall\fP 
.br
\fIval\fP 
.RE
.PP

.SS "bool_t linphone_call_echo_limiter_enabled (const \fBLinphoneCall\fP *call)"
Returns TRUE if echo limiter is enabled\&. 
.SS "\fBLinphoneCallParams\fP* linphone_core_create_default_call_parameters (\fBLinphoneCore\fP *lc)"
Get default call parameters reflecting current linphone core configuration 
.PP
\fBParameters:\fP
.RS 4
\fILinphoneCore\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
LinphoneCallParams 
.RE
.PP

.SS "void linphone_core_enable_dns_srv (\fBLinphoneCore\fP *lc, bool_tenable)"
Enable or disable DNS SRV resolution\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIenable\fP TRUE to enable DNS SRV resolution, FALSE to disable it\&. 
.RE
.PP

.SS "bool_t linphone_core_dns_srv_enabled (const \fBLinphoneCore\fP *lc)"
Tells whether DNS SRV resolution is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if DNS SRV resolution is enabled, FALSE if disabled\&. 
.RE
.PP

.SS "bool_t linphone_core_payload_type_enabled (\fBLinphoneCore\fP *lc, const PayloadType *pt)"
Tells whether the specified payload type is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIpt\fP The #PayloadType we want to know is enabled or not\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the payload type is enabled, FALSE if disabled\&. 
.RE
.PP

.SS "int linphone_core_enable_payload_type (\fBLinphoneCore\fP *lc, PayloadType *pt, bool_tenable)"
Enable or disable the use of the specified payload type\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIpt\fP The #PayloadType to enable or disable\&. It can be retrieved using \fBlinphone_core_find_payload_type\fP 
.br
\fIenable\fP TRUE to enable the payload type, FALSE to disable it\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, any other value otherwise\&. 
.RE
.PP

.SS "PayloadType* linphone_core_find_payload_type (\fBLinphoneCore\fP *lc, const char *type, intrate, intchannels)"
Get payload type from mime type and clock rate
.PP
This function searches in audio and video codecs for the given payload type name and clockrate\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fItype\fP payload mime type (I\&.E SPEEX, PCMU, VP8) 
.br
\fIrate\fP can be \fBLINPHONE_FIND_PAYLOAD_IGNORE_RATE\fP 
.br
\fIchannels\fP number of channels, can be \fBLINPHONE_FIND_PAYLOAD_IGNORE_CHANNELS\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns NULL if not found\&. 
.RE
.PP

.SS "void linphone_core_enable_audio_adaptive_jittcomp (\fBLinphoneCore\fP *lc, bool_tenable)"
Enable or disable the audio adaptive jitter compensation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIenable\fP TRUE to enable the audio adaptive jitter compensation, FALSE to disable it\&. 
.RE
.PP

.SS "bool_t linphone_core_audio_adaptive_jittcomp_enabled (\fBLinphoneCore\fP *lc)"
Tells whether the audio adaptive jitter compensation is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the audio adaptive jitter compensation is enabled, FALSE otherwise\&. 
.RE
.PP

.SS "void linphone_core_enable_video_adaptive_jittcomp (\fBLinphoneCore\fP *lc, bool_tenable)"
Enable or disable the video adaptive jitter compensation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIenable\fP TRUE to enable the video adaptive jitter compensation, FALSE to disable it\&. 
.RE
.PP

.SS "bool_t linphone_core_video_adaptive_jittcomp_enabled (\fBLinphoneCore\fP *lc)"
Tells whether the video adaptive jitter compensation is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the video adaptive jitter compensation is enabled, FALSE otherwise\&. 
.RE
.PP

.SS "void linphone_core_reload_sound_devices (\fBLinphoneCore\fP *lc)"
Update detection of sound devices\&.
.PP
Use this function when the application is notified of USB plug events, so that list of available hardwares for sound playback and capture is updated\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP

.SS "void linphone_core_enable_echo_limiter (\fBLinphoneCore\fP *lc, bool_tval)"
Enables or disable echo limiter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIval\fP TRUE to enable echo limiter, FALSE to disable it\&. 
.RE
.PP

.SS "bool_t linphone_core_echo_limiter_enabled (const \fBLinphoneCore\fP *lc)"
Tells whether echo limiter is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the echo limiter is enabled, FALSE otherwise\&. 
.RE
.PP

.SS "void linphone_core_enable_mic (\fBLinphoneCore\fP *lc, bool_tenable)"
Enable or disable the microphone\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIenable\fP TRUE to enable the microphone, FALSE to disable it\&. 
.RE
.PP

.SS "bool_t linphone_core_mic_enabled (\fBLinphoneCore\fP *lc)"
Tells whether the microphone is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if the microphone is enabled, FALSE if disabled\&. 
.RE
.PP

.SS "void linphone_core_enable_video (\fBLinphoneCore\fP *lc, bool_tvcap_enabled, bool_tdisplay_enabled)"
Enables video globally\&.
.PP
This function does not have any effect during calls\&. It just indicates LinphoneCore to initiate future calls with video or not\&. The two boolean parameters indicate in which direction video is enabled\&. Setting both to false disables video entirely\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP The LinphoneCore object 
.br
\fIvcap_enabled\fP indicates whether video capture is enabled 
.br
\fIdisplay_enabled\fP indicates whether video display should be shown
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_enable_video_capture\fP and \fBlinphone_core_enable_video_display\fP instead\&. 
.RE
.PP

.SS "bool_t linphone_core_video_enabled (\fBLinphoneCore\fP *lc)"
Returns TRUE if video is enabled, FALSE otherwise\&.
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_video_capture_enabled\fP and \fBlinphone_core_video_display_enabled\fP instead\&. 
.RE
.PP

.SS "void linphone_core_enable_video_capture (\fBLinphoneCore\fP *lc, bool_tenable)"
Enable or disable video capture\&.
.PP
This function does not have any effect during calls\&. It just indicates the \fBLinphoneCore\fP to initiate future calls with video capture or not\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIenable\fP TRUE to enable video capture, FALSE to disable it\&. 
.RE
.PP

.SS "void linphone_core_enable_video_display (\fBLinphoneCore\fP *lc, bool_tenable)"
Enable or disable video display\&.
.PP
This function does not have any effect during calls\&. It just indicates the \fBLinphoneCore\fP to initiate future calls with video display or not\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIenable\fP TRUE to enable video display, FALSE to disable it\&. 
.RE
.PP

.SS "bool_t linphone_core_video_capture_enabled (\fBLinphoneCore\fP *lc)"
Tells whether video capture is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if video capture is enabled, FALSE if disabled\&. 
.RE
.PP

.SS "bool_t linphone_core_video_display_enabled (\fBLinphoneCore\fP *lc)"
Tells whether video display is enabled\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE if video display is enabled, FALSE if disabled\&. 
.RE
.PP

.SS "void linphone_core_reload_video_devices (\fBLinphoneCore\fP *lc)"
Update detection of camera devices\&.
.PP
Use this function when the application is notified of USB plug events, so that list of available hardwares for video capture is updated\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP

.SS "int linphone_core_set_static_picture (\fBLinphoneCore\fP *lc, const char *path)"
Set the path to the image file to stream when 'Static picture' is set as the video device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIpath\fP The path to the image file to use\&. 
.RE
.PP

.SS "const char* linphone_core_get_static_picture (\fBLinphoneCore\fP *lc)"
Get the path to the image file streamed when 'Static picture' is set as the video device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The path to the image file streamed when 'Static picture' is set as the video device\&. 
.RE
.PP

.SS "int linphone_core_set_static_picture_fps (\fBLinphoneCore\fP *lc, floatfps)"
Set the frame rate for static picture\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIfps\fP The new frame rate to use for static picture\&. 
.RE
.PP

.SS "float linphone_core_get_static_picture_fps (\fBLinphoneCore\fP *lc)"
Get the frame rate for static picture 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The frame rate used for static picture\&. 
.RE
.PP

.SS "void linphone_core_use_preview_window (\fBLinphoneCore\fP *lc, bool_tyesno)"
Tells the core to use a separate window for local camera preview video, instead of inserting local view within the remote video window\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIyesno\fP TRUE to use a separate window, FALSE to insert the preview in the remote video window\&. 
.RE
.PP

.SS "int linphone_core_set_media_encryption (\fBLinphoneCore\fP *lc, \fBLinphoneMediaEncryption\fPmenc)"
Choose the media encryption policy to be used for RTP packets\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fImenc\fP The media encryption policy to be used\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, any other value otherwise\&. 
.RE
.PP

.SS "\fBLinphoneMediaEncryption\fP linphone_core_get_media_encryption (\fBLinphoneCore\fP *lc)"
Get the media encryption policy being used for RTP packets\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The media encryption policy being used\&. 
.RE
.PP

.SS "bool_t linphone_core_is_media_encryption_mandatory (\fBLinphoneCore\fP *lc)"
Get behaviour when encryption parameters negociation fails on outgoing call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
TRUE means the call will fail; FALSE means an INVITE will be resent with encryption disabled\&. 
.RE
.PP

.SS "void linphone_core_set_media_encryption_mandatory (\fBLinphoneCore\fP *lc, bool_tm)"
Define behaviour when encryption parameters negociation fails on outgoing call\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIm\fP If set to TRUE call will fail; if set to FALSE will resend an INVITE with encryption disabled\&. 
.RE
.PP

.SS "void linphone_core_set_video_display_filter (\fBLinphoneCore\fP *lc, const char *filter_name)"
Set the name of the mediastreamer2 filter to be used for rendering video\&. This is for advanced users of the library, mainly to workaround hardware/driver bugs\&. 
.SS "const char* linphone_core_get_video_display_filter (\fBLinphoneCore\fP *lc)"
Get the name of the mediastreamer2 filter used for rendering video\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for liblinphone from the source code\&.
