.TH "Managing authentication: userid and passwords" 3 "Fri May 2 2014" "Version 3.7.0" "liblinphone" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Managing authentication: userid and passwords \- 
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct _LinphoneAuthInfo \fBLinphoneAuthInfo\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBLinphoneAuthInfo\fP * \fBlinphone_auth_info_new\fP (const char *username, const char *userid, const char *passwd, const char *ha1, const char *realm, const char *domain)"
.br
.ti -1c
.RI "const char * \fBlinphone_auth_info_get_username\fP (const \fBLinphoneAuthInfo\fP *i)"
.br
.ti -1c
.RI "const char * \fBlinphone_auth_info_get_passwd\fP (const \fBLinphoneAuthInfo\fP *i)"
.br
.ti -1c
.RI "void \fBlinphone_auth_info_set_passwd\fP (\fBLinphoneAuthInfo\fP *info, const char *passwd)"
.br
.ti -1c
.RI "void \fBlinphone_auth_info_set_username\fP (\fBLinphoneAuthInfo\fP *info, const char *username)"
.br
.ti -1c
.RI "void \fBlinphone_auth_info_set_userid\fP (\fBLinphoneAuthInfo\fP *info, const char *userid)"
.br
.ti -1c
.RI "void \fBlinphone_auth_info_set_realm\fP (\fBLinphoneAuthInfo\fP *info, const char *realm)"
.br
.ti -1c
.RI "void \fBlinphone_auth_info_set_domain\fP (\fBLinphoneAuthInfo\fP *info, const char *domain)"
.br
.ti -1c
.RI "void \fBlinphone_auth_info_set_ha1\fP (\fBLinphoneAuthInfo\fP *info, const char *ha1)"
.br
.ti -1c
.RI "void \fBlinphone_auth_info_destroy\fP (\fBLinphoneAuthInfo\fP *obj)"
.br
.ti -1c
.RI "const \fBLinphoneAuthInfo\fP * \fBlinphone_core_find_auth_info\fP (\fBLinphoneCore\fP *lc, const char *realm, const char *username, const char *domain)"
.br
.ti -1c
.RI "\fBLinphoneAuthInfo\fP * \fBlinphone_core_create_auth_info\fP (\fBLinphoneCore\fP *lc, const char *username, const char *userid, const char *passwd, const char *ha1, const char *realm, const char *domain)"
.br
.ti -1c
.RI "void \fBlinphone_core_add_auth_info\fP (\fBLinphoneCore\fP *lc, const \fBLinphoneAuthInfo\fP *info)"
.br
.ti -1c
.RI "void \fBlinphone_core_abort_authentication\fP (\fBLinphoneCore\fP *lc, \fBLinphoneAuthInfo\fP *info)"
.br
.ti -1c
.RI "void \fBlinphone_core_remove_auth_info\fP (\fBLinphoneCore\fP *lc, const \fBLinphoneAuthInfo\fP *info)"
.br
.ti -1c
.RI "const MSList * \fBlinphone_core_get_auth_info_list\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_clear_all_auth_info\fP (\fBLinphoneCore\fP *lc)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Instanciate a new auth info with values from source 
.PP
\fBParameters:\fP
.RS 4
\fIsource\fP auth info object to be cloned 
.RE
.PP
\fBReturns:\fP
.RS 4
newly created auth info 
.RE
.PP

.SH "Typedef Documentation"
.PP 
.SS "typedef struct _LinphoneAuthInfo \fBLinphoneAuthInfo\fP"
Object holding authentication information\&.
.PP
\fBNote:\fP
.RS 4
The object's fields should not be accessed directly\&. Prefer using the accessor methods\&.
.RE
.PP
In most case, authentication information consists of a username and password\&. Sometimes, a userid is required by proxy, and realm can be useful to discriminate different SIP domains\&.
.PP
Once created and filled, a LinphoneAuthInfo must be added to the LinphoneCore in order to become known and used automatically when needed\&. Use \fBlinphone_core_add_auth_info()\fP for that purpose\&.
.PP
The LinphoneCore object can take the initiative to request authentication information when needed to the application through the auth_info_requested callback of the LinphoneCoreVTable structure\&.
.PP
The application can respond to this information request later using \fBlinphone_core_add_auth_info()\fP\&. This will unblock all pending authentication transactions and retry them with authentication headers\&. 
.SH "Function Documentation"
.PP 
.SS "\fBLinphoneAuthInfo\fP* linphone_auth_info_new (const char *username, const char *userid, const char *passwd, const char *ha1, const char *realm, const char *domain)"
Create a LinphoneAuthInfo object with supplied information\&. The object can be created empty, that is with all arguments set to NULL\&. Username, userid, password, realm and domain can be set later using specific methods\&. At the end, username and passwd (or ha1) are required\&. 
.PP
\fBParameters:\fP
.RS 4
\fIusername\fP the username that needs to be authenticated 
.br
\fIuserid\fP the userid used for authenticating (use NULL if you don't know what it is) 
.br
\fIpasswd\fP the password in clear text 
.br
\fIha1\fP the ha1-encrypted password if password is not given in clear text\&. 
.br
\fIrealm\fP the authentication domain (which can be larger than the sip domain\&. Unfortunately many SIP servers don't use this parameter\&. 
.br
\fIdomain\fP the SIP domain for which this authentication information is valid, if it has to be restricted for a single SIP domain\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
a \fBLinphoneAuthInfo\fP\&. \fBlinphone_auth_info_destroy()\fP must be used to destroy it when no longer needed\&. The LinphoneCore makes a copy of LinphoneAuthInfo passed through \fBlinphone_core_add_auth_info()\fP\&. 
.RE
.PP

.SS "const char* linphone_auth_info_get_username (const \fBLinphoneAuthInfo\fP *i)"
Returns username\&. 
.SS "const char* linphone_auth_info_get_passwd (const \fBLinphoneAuthInfo\fP *i)"
Returns password\&. 
.SS "void linphone_auth_info_set_passwd (\fBLinphoneAuthInfo\fP *info, const char *passwd)"
Sets the password\&. 
.SS "void linphone_auth_info_set_username (\fBLinphoneAuthInfo\fP *info, const char *username)"
Sets the username\&. 
.SS "void linphone_auth_info_set_userid (\fBLinphoneAuthInfo\fP *info, const char *userid)"
Sets userid\&. 
.SS "void linphone_auth_info_set_realm (\fBLinphoneAuthInfo\fP *info, const char *realm)"
Set realm\&. 
.SS "void linphone_auth_info_set_domain (\fBLinphoneAuthInfo\fP *info, const char *domain)"
Set domain for which this authentication is valid\&. This should not be necessary because realm is supposed to be unique and sufficient\&. However, many SIP servers don't set realm correctly, then domain has to be used to distinguish between several SIP account bearing the same username\&. 
.SS "void linphone_auth_info_set_ha1 (\fBLinphoneAuthInfo\fP *info, const char *ha1)"
Sets ha1\&. 
.SS "void linphone_auth_info_destroy (\fBLinphoneAuthInfo\fP *obj)"
Destroys a LinphoneAuthInfo object\&. 
.SS "const \fBLinphoneAuthInfo\fP* linphone_core_find_auth_info (\fBLinphoneCore\fP *lc, const char *realm, const char *username, const char *domain)"
Find authentication info matching realm, username, domain criterias\&. First of all, (realm,username) pair are searched\&. If multiple results (which should not happen because realm are supposed to be unique), then domain is added to the search\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP the LinphoneCore 
.br
\fIrealm\fP the authentication 'realm' (optional) 
.br
\fIusername\fP the SIP username to be authenticated (mandatory) 
.br
\fIdomain\fP the SIP domain name (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
a \fBLinphoneAuthInfo\fP 
.RE
.PP

.SS "\fBLinphoneAuthInfo\fP * linphone_core_create_auth_info (\fBLinphoneCore\fP *lc, const char *username, const char *userid, const char *passwd, const char *ha1, const char *realm, const char *domain)"
Create an authentication information with default values from Linphone core\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIusername\fP String containing the username part of the authentication credentials 
.br
\fIuserid\fP String containing the username to use to calculate the authentication digest (optional) 
.br
\fIpasswd\fP String containing the password of the authentication credentials (optional, either passwd or ha1 must be set) 
.br
\fIha1\fP String containing a ha1 hash of the password (optional, either passwd or ha1 must be set) 
.br
\fIrealm\fP String used to discriminate different SIP authentication domains (optional) 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBLinphoneAuthInfo\fP with default values set 
.RE
.PP

.SS "void linphone_core_add_auth_info (\fBLinphoneCore\fP *lc, const \fBLinphoneAuthInfo\fP *info)"
Adds authentication information to the LinphoneCore\&.
.PP
This information will be used during all SIP transacations that require authentication\&. 
.SS "void linphone_core_abort_authentication (\fBLinphoneCore\fP *lc, \fBLinphoneAuthInfo\fP *info)"
This method is used to abort a user authentication request initiated by LinphoneCore from the auth_info_requested callback of LinphoneCoreVTable\&. 
.SS "void linphone_core_remove_auth_info (\fBLinphoneCore\fP *lc, const \fBLinphoneAuthInfo\fP *info)"
Removes an authentication information object\&. 
.SS "const MSList* linphone_core_get_auth_info_list (const \fBLinphoneCore\fP *lc)"
Returns an unmodifiable list of currently entered LinphoneAuthInfo\&. 
.SS "void linphone_core_clear_all_auth_info (\fBLinphoneCore\fP *lc)"
Clear all authentication information\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for liblinphone from the source code\&.
