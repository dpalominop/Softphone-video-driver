.TH "Controlling network parameters (ports, mtu...)" 3 "Fri May 2 2014" "Version 3.7.0" "liblinphone" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Controlling network parameters (ports, mtu...) \- 
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum 
.br
\fB_LinphoneFirewallPolicy\fP \fBLinphoneFirewallPolicy\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fB_LinphoneFirewallPolicy\fP { \fBLinphonePolicyNoFirewall\fP, \fBLinphonePolicyUseNatAddress\fP, \fBLinphonePolicyUseStun\fP, \fBLinphonePolicyUseIce\fP, \fBLinphonePolicyUseUpnp\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBlinphone_core_get_audio_port\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_get_audio_port_range\fP (const \fBLinphoneCore\fP *lc, int *min_port, int *max_port)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_video_port\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_get_video_port_range\fP (const \fBLinphoneCore\fP *lc, int *min_port, int *max_port)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_audio_port\fP (\fBLinphoneCore\fP *lc, int port)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_video_port\fP (\fBLinphoneCore\fP *lc, int port)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_sip_port\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "int \fBlinphone_core_set_sip_transports\fP (\fBLinphoneCore\fP *lc, const \fBLCSipTransports\fP *tr_config)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_sip_transports\fP (\fBLinphoneCore\fP *lc, \fBLCSipTransports\fP *tr)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_sip_port\fP (\fBLinphoneCore\fP *lc, int port)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_ipv6_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_ipv6\fP (\fBLinphoneCore\fP *lc, bool_t val)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_sip_dscp\fP (\fBLinphoneCore\fP *lc, int dscp)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_sip_dscp\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_audio_dscp\fP (\fBLinphoneCore\fP *lc, int dscp)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_audio_dscp\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_video_dscp\fP (\fBLinphoneCore\fP *lc, int dscp)"
.br
.ti -1c
.RI "int \fBlinphone_core_get_video_dscp\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_stun_server\fP (\fBLinphoneCore\fP *lc, const char *server)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_stun_server\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_upnp_available\fP ()"
.br
.ti -1c
.RI "\fBLinphoneUpnpState\fP \fBlinphone_core_get_upnp_state\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_upnp_external_ipaddress\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_nat_address\fP (\fBLinphoneCore\fP *lc, const char *addr)"
.br
.ti -1c
.RI "const char * \fBlinphone_core_get_nat_address\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_firewall_policy\fP (\fBLinphoneCore\fP *lc, \fBLinphoneFirewallPolicy\fP pol)"
.br
.ti -1c
.RI "\fBLinphoneFirewallPolicy\fP \fBlinphone_core_get_firewall_policy\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_network_reachable\fP (\fBLinphoneCore\fP *lc, bool_t value)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_is_network_reachable\fP (\fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_enable_keep_alive\fP (\fBLinphoneCore\fP *lc, bool_t enable)"
.br
.ti -1c
.RI "bool_t \fBlinphone_core_keep_alive_enabled\fP (\fBLinphoneCore\fP *lc)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fB_LinphoneFirewallPolicy\fP  \fBLinphoneFirewallPolicy\fP"
Policy to use to pass through firewalls\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fB_LinphoneFirewallPolicy\fP"
Policy to use to pass through firewalls\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphonePolicyNoFirewall \fP\fP
Do not use any mechanism to pass through firewalls 
.TP
\fB\fILinphonePolicyUseNatAddress \fP\fP
Use the specified public adress 
.TP
\fB\fILinphonePolicyUseStun \fP\fP
Use a STUN server to get the public address 
.TP
\fB\fILinphonePolicyUseIce \fP\fP
Use the ICE protocol 
.TP
\fB\fILinphonePolicyUseUpnp \fP\fP
Use the uPnP protocol 
.SH "Function Documentation"
.PP 
.SS "int linphone_core_get_audio_port (const \fBLinphoneCore\fP *lc)"
Returns the UDP port used for audio streaming\&. 
.SS "void linphone_core_get_audio_port_range (const \fBLinphoneCore\fP *lc, int *min_port, int *max_port)"
Get the audio port range from which is randomly chosen the UDP port used for audio streaming\&. 
.SS "int linphone_core_get_video_port (const \fBLinphoneCore\fP *lc)"
Returns the UDP port used for video streaming\&. 
.SS "void linphone_core_get_video_port_range (const \fBLinphoneCore\fP *lc, int *min_port, int *max_port)"
Get the video port range from which is randomly chosen the UDP port used for video streaming\&. 
.SS "void linphone_core_set_audio_port (\fBLinphoneCore\fP *lc, intport)"
Sets the UDP port used for audio streaming\&. 
.SS "void linphone_core_set_video_port (\fBLinphoneCore\fP *lc, intport)"
Sets the UDP port used for video streaming\&. 
.SS "int linphone_core_get_sip_port (\fBLinphoneCore\fP *lc)"
Returns the UDP port used by SIP\&.
.PP
Deprecated: use \fBlinphone_core_get_sip_transports()\fP instead\&. 
.SS "int linphone_core_set_sip_transports (\fBLinphoneCore\fP *lc, const \fBLCSipTransports\fP *tr_config)"
Sets the ports to be used for each of transport (UDP or TCP)
.PP
A zero value port for a given transport means the transport is not used\&. 
.SS "int linphone_core_get_sip_transports (\fBLinphoneCore\fP *lc, \fBLCSipTransports\fP *tr)"
Retrieves the ports used for each transport (udp, tcp)\&. A zero value port for a given transport means the transport is not used\&. 
.SS "void linphone_core_set_sip_port (\fBLinphoneCore\fP *lc, intport)"
Sets the UDP port to be used by SIP\&.
.PP
Deprecated: use \fBlinphone_core_set_sip_transports()\fP instead\&. 
.SS "bool_t linphone_core_ipv6_enabled (\fBLinphoneCore\fP *lc)"
Returns TRUE if IPv6 is enabled\&.
.PP
See \fBlinphone_core_enable_ipv6()\fP for more details on how IPv6 is supported in liblinphone\&. 
.SS "void linphone_core_enable_ipv6 (\fBLinphoneCore\fP *lc, bool_tval)"
Turns IPv6 support on or off\&.
.PP
\fBNote:\fP
.RS 4
IPv6 support is exclusive with IPv4 in liblinphone: when IPv6 is turned on, IPv4 calls won't be possible anymore\&. By default IPv6 support is off\&. 
.RE
.PP

.SS "void linphone_core_set_sip_dscp (\fBLinphoneCore\fP *lc, intdscp)"
Set the DSCP field for SIP signaling channel\&.
.PP
.IP "\(bu" 2
The DSCP defines the quality of service in IP packets\&. 
.PP

.SS "int linphone_core_get_sip_dscp (const \fBLinphoneCore\fP *lc)"
Get the DSCP field for SIP signaling channel\&.
.PP
.IP "\(bu" 2
The DSCP defines the quality of service in IP packets\&. 
.PP

.SS "void linphone_core_set_audio_dscp (\fBLinphoneCore\fP *lc, intdscp)"
Set the DSCP field for outgoing audio streams\&.
.PP
The DSCP defines the quality of service in IP packets\&. 
.SS "int linphone_core_get_audio_dscp (const \fBLinphoneCore\fP *lc)"
Get the DSCP field for outgoing audio streams\&.
.PP
The DSCP defines the quality of service in IP packets\&. 
.SS "void linphone_core_set_video_dscp (\fBLinphoneCore\fP *lc, intdscp)"
Set the DSCP field for outgoing video streams\&.
.PP
The DSCP defines the quality of service in IP packets\&. 
.SS "int linphone_core_get_video_dscp (const \fBLinphoneCore\fP *lc)"
Get the DSCP field for outgoing video streams\&.
.PP
The DSCP defines the quality of service in IP packets\&. 
.SS "void linphone_core_set_stun_server (\fBLinphoneCore\fP *lc, const char *server)"
Set the STUN server address to use when the firewall policy is set to STUN\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIserver\fP The STUN server address to use\&. 
.RE
.PP

.SS "const char* linphone_core_get_stun_server (const \fBLinphoneCore\fP *lc)"
Get the STUN server address being used\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
The STUN server address being used\&. 
.RE
.PP

.SS "bool_t linphone_core_upnp_available ()"
Return the availability of uPnP\&.
.PP
\fBReturns:\fP
.RS 4
true if uPnP is available otherwise return false\&. 
.RE
.PP

.SS "\fBLinphoneUpnpState\fP linphone_core_get_upnp_state (const \fBLinphoneCore\fP *lc)"
Return the internal state of uPnP\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
an LinphoneUpnpState\&. 
.RE
.PP

.SS "const char* linphone_core_get_upnp_external_ipaddress (const \fBLinphoneCore\fP *lc)"
Return the external ip address of router\&. In some cases the uPnP can have an external ip address but not a usable uPnP (state different of Ok)\&.
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
a null terminated string containing the external ip address\&. If the the external ip address is not available return null\&. 
.RE
.PP

.SS "void linphone_core_set_nat_address (\fBLinphoneCore\fP *lc, const char *addr)"
Set the public IP address of NAT when using the firewall policy is set to use NAT\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIaddr\fP The public IP address of NAT to use\&. 
.RE
.PP

.SS "const char* linphone_core_get_nat_address (const \fBLinphoneCore\fP *lc)"
Get the public IP address of NAT being used\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The public IP address of NAT being used\&. 
.RE
.PP

.SS "void linphone_core_set_firewall_policy (\fBLinphoneCore\fP *lc, \fBLinphoneFirewallPolicy\fPpol)"
Set the policy to use to pass through firewalls\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.br
\fIpol\fP The \fBLinphoneFirewallPolicy\fP to use\&. 
.RE
.PP

.SS "\fBLinphoneFirewallPolicy\fP linphone_core_get_firewall_policy (const \fBLinphoneCore\fP *lc)"
Get the policy that is used to pass through firewalls\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphoneFirewallPolicy\fP that is being used\&. 
.RE
.PP

.SS "void linphone_core_set_network_reachable (\fBLinphoneCore\fP *lc, bool_tvalue)"
This method is called by the application to notify the linphone core library when network is reachable\&. Calling this method with true trigger linphone to initiate a registration process for all proxies\&. Calling this method disables the automatic network detection mode\&. It means you must call this method after each network state changes\&. 
.SS "bool_t linphone_core_is_network_reachable (\fBLinphoneCore\fP *lc)"
return network state either as positioned by the application or by linphone itself\&. 
.SS "void linphone_core_enable_keep_alive (\fBLinphoneCore\fP *lc, bool_tenable)"
enable signaling keep alive\&. small udp packet sent periodically to keep udp NAT association
.PP
Enables signaling keep alive 
.SS "bool_t linphone_core_keep_alive_enabled (\fBLinphoneCore\fP *lc)"
Is signaling keep alive
.PP
Is signaling keep alive enabled 
.SH "Author"
.PP 
Generated automatically by Doxygen for liblinphone from the source code\&.
